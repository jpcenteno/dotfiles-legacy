#==============================================================================
# .Zshrc
#==============================================================================

# ------------------------------------------------------------------------------
# Aux: Logging:
#
# I added logging to this script for better debugging, since I intend it to
# work across different systems.
# ------------------------------------------------------------------------------

__ZSH_LOG_LVL_DEBUG="1"
__ZSH_LOG_LVL_INFO="2"
__ZSH_LOG_LVL_WARN="3"
__ZSH_LOG_LVL_ERROR="4"

LOG_LVL="${__ZSH_LOG_LVL_DEBUG}"

__LOG_COLOR_DEBUG="\e[1;32m" # Green
__LOG_COLOR_INFO="\e[1;34m" # Blue
__LOG_COLOR_WARN="\e[1;33m" # Yellow
__LOG_COLOR_ERROR="\e[1;31m" # Red


# Generic function for logging. In addition to the `message`, it takes other
# parameters specific to the logging level.
#
# Don't call this directly. Instead, implement a wrapping function that
# abstracts away the necessary parameters.
#
# Parameters:
# -----------
# - `log_level_name`: The name of the logging level (i.e. "WARN")
# - `color`: A color scape sequence for the logging line.
# - `message`: The logging message.
__log_print_generic() {
    local log_level_name="${1}"
    local log_level="${2}"
    local color="${3}"
    local message="${4}"

    local log_date="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

    if [ "${LOG_LVL}" -le "${log_level}" ]; then
        echo "${color}[${log_level_name} ${log_date}] .zshrc:\e[0m ${message}" 1>&2
    fi
}

# Per-level logging functions.
__log_debug() {
    __log_print_generic DEBUG "${__ZSH_LOG_LVL_DEBUG}" "${__LOG_COLOR_DEBUG}" "${1}"
}
__log_info() {
    __log_print_generic INFO "${__ZSH_LOG_LVL_INFO}" "${__LOG_COLOR_INFO}" "${1}"
}
__log_warn() {
    __log_print_generic WARN "${__ZSH_LOG_LVL_WARN}" "${__LOG_COLOR_WARN}" "${1}"
}
__log_error() {
    __log_print_generic ERROR "${__ZSH_LOG_LVL_ERROR}" "${__LOG_COLOR_ERROR}" "${1}"
}

# ------------------------------------------------------------------------------
# ENV
# ------------------------------------------------------------------------------

export XDG_CONFIG_HOME="${HOME}/.config"

# ------------------------------------------------------------------------------
# Aux functions
# ------------------------------------------------------------------------------

# Succeeds if and only if the host system is a Darwin (Mac OS) system.
__is_darwin() { [ "$(uname)" = "Darwin" ]; }

# Succeeds if and only if Homebrew is installed on the host system.
__is_homebrew_installed() { [ -x /usr/local/bin/brew ]; }

# Succeeds if and only if the command argument is in the `$PATH`.
__in_path() {
    executable_name="${1}"
    command -v "${executable_name}" &> /dev/null
}

# Removes a directory from the PATH.
# This is useful to remove duplicates before prepending/appending a directory
# to the path in order to keep it legible.
remove_from_path() {
    directory_to_remove="${1}"
    export PATH="$( echo "${PATH}" | sed -E "s#:?${directory_to_remove}##" | sed -E 's#^:##' )"
}

# Push a directory to the BEGINNING of the $PATH.
prepend_to_path_if_exists() {
    directory="${1}"

    if [ -d "${directory}" ]; then
        remove_from_path "${directory}"
        export PATH="${directory}:${PATH}"
    fi
}

# Push a directory to the END of the $PATH.
append_to_path_if_exists() {
    directory="${1}"

    if [ -d "${directory}" ]; then
        remove_from_path "${directory}"
        export PATH="${PATH}:${directory}"
    fi
}

# ------------------------------------------------------------------------------
# PATH
# ------------------------------------------------------------------------------

# Homebrew installed programs.
if __is_darwin && __is_homebrew_installed; then
    prepend_to_path_if_exists '/usr/local/bin'
    prepend_to_path_if_exists '/usr/local/opt/make/libexec/gnubin' # GNU Make
    prepend_to_path_if_exists '/usr/local/opt/grep/libexec/gnubin' # GNU Grep
    prepend_to_path_if_exists '/usr/local/opt/openjdk/bin' # OpenJDK
    prepend_to_path_if_exists '/usr/local/opt/ruby/bin' # Ruby

    # Setup the Google Cloud CLI tools.
    gcloud_tools_env_file='/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
    gcloud_tools_completion_file='/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'
    [ -f "${gcloud_tools_env_file}" ] && source "${gcloud_tools_env_file}"
    [ -f "${gcloud_tools_completion_file}" ] && source "${gcloud_tools_completion_file}"
fi

# Doom emacs executables:
append_to_path_if_exists "${HOME}/.emacs/bin"

# rustup:
if [ -f "${HOME}/.cargo/env" ]; then
    source $HOME/.cargo/env
fi

# A directory for local scripts
mkdir -p "${HOME}/.bin"
append_to_path_if_exists "${HOME}/.bin"

# Pyenv
if __in_path "pyenv"; then
  eval "$(pyenv init -)"
fi

alias pip=/usr/local/bin/pip3

# ------------------------------------------------------------------------------
# Environment
# ------------------------------------------------------------------------------

# This trick allows me to set the default editor (`$EDITOR`) by overriding it
# in an ascending order of preference:
__in_path "nano" && export EDITOR="nano"
__in_path "vi" && export EDITOR="vi"
__in_path "vim" && export EDITOR="vim"
__in_path "nvim" && export EDITOR="nvim"

export BAT_THEME="GitHub"

# ------------------------------------------------------------------------------
# Development environment management
# ------------------------------------------------------------------------------

# ASDF
if __is_homebrew_installed && [ -f "$(brew --prefix asdf)/libexec/asdf.sh" ]; then
    . "$(brew --prefix asdf)/libexec/asdf.sh"
fi

if __in_path "direnv"; then
    eval "$(direnv hook zsh)"
fi

# ------------------------------------------------------------------------------
# Aliases
# ------------------------------------------------------------------------------

alias g=git

alias k=kubectl

# Overriding aliases:
__in_path "nvim" && alias vim=nvim
__in_path "exa" && alias ls=exa
__in_path "bat" && alias cat=bat
__in_path "docker-compose" && alias dc=docker-compose

# cd into a new temporary directory.
alias cdtmp='cd $(mktemp -d -t "shell-temp-dir")'

# ------------------------------------------------------------------------------
# Prompt
# ------------------------------------------------------------------------------

if __in_path "starship"; then
    eval "$(starship init zsh)"
fi 

# ------------------------------------------------------------------------------
# Compeltion
# ------------------------------------------------------------------------------

# Zsh has an arcane syntax for config. This is a copy-paste from:
# https://scriptingosx.com/2019/07/moving-to-zsh-part-5-completions/

autoload -Uz compinit && compinit

# case insensitive path-completion 
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 

# partial completion suggestions
zstyle ':completion:*' list-suffixes zstyle ':completion:*' expand prefix suffix 

# ------------------------------------------------------------------------------
# Key Binds
# ------------------------------------------------------------------------------

# Use vi mode
bindkey -v

# --------------------------------------------------------------------------------
# Clear
#
# Clear the screen to hide all the logs.
# --------------------------------------------------------------------------------

clear
